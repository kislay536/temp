// Generated by Metro-MPI

#include <mpi.h>
#include <iostream>
#include <csignal>
#include "Valu_tile_noc.h"
#include "verilated.h"
#include "metro_mpi.cpp"

static Valu_tile_noc* top = nullptr;
static int rank = -1;
static int size = -1;

const int SHUTDOWN_TAG = 299;

void cleanup(int signum) {
    if (top) { top->final(); delete top; top = nullptr; }
    mpi_finalize();
    exit(signum);
}

// --- Initialization functions for each partition instance ---
void initialize_partition_t0_0() {
    std::cout << "Initializing partition t0_0 for Rank 1..." << std::endl;
    top->TILE_X = 0x0;
    top->TILE_Y = 0x0;
}

void initialize_partition_t0_1() {
    std::cout << "Initializing partition t0_1 for Rank 2..." << std::endl;
    top->TILE_X = 0x1;
    top->TILE_Y = 0x0;
}

void initialize_partition_t0_2() {
    std::cout << "Initializing partition t0_2 for Rank 3..." << std::endl;
    top->TILE_X = 0x2;
    top->TILE_Y = 0x0;
}

void initialize_partition_t1_0() {
    std::cout << "Initializing partition t1_0 for Rank 4..." << std::endl;
    top->TILE_X = 0x0;
    top->TILE_Y = 0x1;
}

void initialize_partition_t1_1() {
    std::cout << "Initializing partition t1_1 for Rank 5..." << std::endl;
    top->TILE_X = 0x1;
    top->TILE_Y = 0x1;
}

void initialize_partition_t1_2() {
    std::cout << "Initializing partition t1_2 for Rank 6..." << std::endl;
    top->TILE_X = 0x2;
    top->TILE_Y = 0x1;
}

void initialize_partition_t2_0() {
    std::cout << "Initializing partition t2_0 for Rank 7..." << std::endl;
    top->TILE_X = 0x0;
    top->TILE_Y = 0x2;
}

void initialize_partition_t2_1() {
    std::cout << "Initializing partition t2_1 for Rank 8..." << std::endl;
    top->TILE_X = 0x1;
    top->TILE_Y = 0x2;
}

void initialize_partition_t2_2() {
    std::cout << "Initializing partition t2_2 for Rank 9..." << std::endl;
    top->TILE_X = 0x2;
    top->TILE_Y = 0x2;
}

// --- Modular MPI Send/Receive functions for each rank ---

void receive_inputs_for_rank_1() {
    // Receive from Rank 0
    mpi_rank_0_to_1_t req_from_0 = mpi_receive_from_rank_0_to_1();
    top->host_in_a = req_from_0.a;
    top->host_in_b = req_from_0.b;
    // Receive from Rank 2
    mpi_rank_2_to_1_t req_from_2 = mpi_receive_from_rank_2_to_1();
    top->in_a_e = req_from_2.out_a_w;
    top->in_b_e = req_from_2.out_b_w;
    top->in_ctrl_e = req_from_2.out_ctrl_w;
    top->in_valid_e = req_from_2.out_valid_w;
    // Receive from Rank 4
    mpi_rank_4_to_1_t req_from_4 = mpi_receive_from_rank_4_to_1();
    top->in_a_s = req_from_4.out_a_n;
    top->in_b_s = req_from_4.out_b_n;
    top->in_ctrl_s = req_from_4.out_ctrl_n;
    top->in_valid_s = req_from_4.out_valid_n;
}

void send_outputs_from_rank_1() {
    // Send to Rank 0
    {
        mpi_rank_1_to_0_t resp_to_0{};
        resp_to_0.host_out_a = top->host_out_a;
        resp_to_0.host_out_valid = top->host_out_valid;
        mpi_send_rank_1_to_0(resp_to_0);
    }
    // Send to Rank 2
    {
        mpi_rank_1_to_2_t resp_to_2{};
        resp_to_2.out_a_e = top->out_a_e;
        resp_to_2.out_b_e = top->out_b_e;
        resp_to_2.out_ctrl_e = top->out_ctrl_e;
        resp_to_2.out_valid_e = top->out_valid_e;
        mpi_send_rank_1_to_2(resp_to_2);
    }
    // Send to Rank 4
    {
        mpi_rank_1_to_4_t resp_to_4{};
        resp_to_4.out_a_s = top->out_a_s;
        resp_to_4.out_b_s = top->out_b_s;
        resp_to_4.out_ctrl_s = top->out_ctrl_s;
        resp_to_4.out_valid_s = top->out_valid_s;
        mpi_send_rank_1_to_4(resp_to_4);
    }
}

void receive_inputs_for_rank_2() {
    // Receive from Rank 1
    mpi_rank_1_to_2_t req_from_1 = mpi_receive_from_rank_1_to_2();
    top->in_a_w = req_from_1.out_a_e;
    top->in_b_w = req_from_1.out_b_e;
    top->in_ctrl_w = req_from_1.out_ctrl_e;
    top->in_valid_w = req_from_1.out_valid_e;
    // Receive from Rank 3
    mpi_rank_3_to_2_t req_from_3 = mpi_receive_from_rank_3_to_2();
    top->in_a_e = req_from_3.out_a_w;
    top->in_b_e = req_from_3.out_b_w;
    top->in_ctrl_e = req_from_3.out_ctrl_w;
    top->in_valid_e = req_from_3.out_valid_w;
    // Receive from Rank 5
    mpi_rank_5_to_2_t req_from_5 = mpi_receive_from_rank_5_to_2();
    top->in_a_s = req_from_5.out_a_n;
    top->in_b_s = req_from_5.out_b_n;
    top->in_ctrl_s = req_from_5.out_ctrl_n;
    top->in_valid_s = req_from_5.out_valid_n;
}

void send_outputs_from_rank_2() {
    // Send to Rank 1
    {
        mpi_rank_2_to_1_t resp_to_1{};
        resp_to_1.out_a_w = top->out_a_w;
        resp_to_1.out_b_w = top->out_b_w;
        resp_to_1.out_ctrl_w = top->out_ctrl_w;
        resp_to_1.out_valid_w = top->out_valid_w;
        mpi_send_rank_2_to_1(resp_to_1);
    }
    // Send to Rank 3
    {
        mpi_rank_2_to_3_t resp_to_3{};
        resp_to_3.out_a_e = top->out_a_e;
        resp_to_3.out_b_e = top->out_b_e;
        resp_to_3.out_ctrl_e = top->out_ctrl_e;
        resp_to_3.out_valid_e = top->out_valid_e;
        mpi_send_rank_2_to_3(resp_to_3);
    }
    // Send to Rank 5
    {
        mpi_rank_2_to_5_t resp_to_5{};
        resp_to_5.out_a_s = top->out_a_s;
        resp_to_5.out_b_s = top->out_b_s;
        resp_to_5.out_ctrl_s = top->out_ctrl_s;
        resp_to_5.out_valid_s = top->out_valid_s;
        mpi_send_rank_2_to_5(resp_to_5);
    }
}

void receive_inputs_for_rank_3() {
    // Receive from Rank 2
    mpi_rank_2_to_3_t req_from_2 = mpi_receive_from_rank_2_to_3();
    top->in_a_w = req_from_2.out_a_e;
    top->in_b_w = req_from_2.out_b_e;
    top->in_ctrl_w = req_from_2.out_ctrl_e;
    top->in_valid_w = req_from_2.out_valid_e;
    // Receive from Rank 6
    mpi_rank_6_to_3_t req_from_6 = mpi_receive_from_rank_6_to_3();
    top->in_a_s = req_from_6.out_a_n;
    top->in_b_s = req_from_6.out_b_n;
    top->in_ctrl_s = req_from_6.out_ctrl_n;
    top->in_valid_s = req_from_6.out_valid_n;
}

void send_outputs_from_rank_3() {
    // Send to Rank 2
    {
        mpi_rank_3_to_2_t resp_to_2{};
        resp_to_2.out_a_w = top->out_a_w;
        resp_to_2.out_b_w = top->out_b_w;
        resp_to_2.out_ctrl_w = top->out_ctrl_w;
        resp_to_2.out_valid_w = top->out_valid_w;
        mpi_send_rank_3_to_2(resp_to_2);
    }
    // Send to Rank 6
    {
        mpi_rank_3_to_6_t resp_to_6{};
        resp_to_6.out_a_s = top->out_a_s;
        resp_to_6.out_b_s = top->out_b_s;
        resp_to_6.out_ctrl_s = top->out_ctrl_s;
        resp_to_6.out_valid_s = top->out_valid_s;
        mpi_send_rank_3_to_6(resp_to_6);
    }
}

void receive_inputs_for_rank_4() {
    // Receive from Rank 1
    mpi_rank_1_to_4_t req_from_1 = mpi_receive_from_rank_1_to_4();
    top->in_a_n = req_from_1.out_a_s;
    top->in_b_n = req_from_1.out_b_s;
    top->in_ctrl_n = req_from_1.out_ctrl_s;
    top->in_valid_n = req_from_1.out_valid_s;
    // Receive from Rank 5
    mpi_rank_5_to_4_t req_from_5 = mpi_receive_from_rank_5_to_4();
    top->in_a_e = req_from_5.out_a_w;
    top->in_b_e = req_from_5.out_b_w;
    top->in_ctrl_e = req_from_5.out_ctrl_w;
    top->in_valid_e = req_from_5.out_valid_w;
    // Receive from Rank 7
    mpi_rank_7_to_4_t req_from_7 = mpi_receive_from_rank_7_to_4();
    top->in_a_s = req_from_7.out_a_n;
    top->in_b_s = req_from_7.out_b_n;
    top->in_ctrl_s = req_from_7.out_ctrl_n;
    top->in_valid_s = req_from_7.out_valid_n;
}

void send_outputs_from_rank_4() {
    // Send to Rank 1
    {
        mpi_rank_4_to_1_t resp_to_1{};
        resp_to_1.out_a_n = top->out_a_n;
        resp_to_1.out_b_n = top->out_b_n;
        resp_to_1.out_ctrl_n = top->out_ctrl_n;
        resp_to_1.out_valid_n = top->out_valid_n;
        mpi_send_rank_4_to_1(resp_to_1);
    }
    // Send to Rank 5
    {
        mpi_rank_4_to_5_t resp_to_5{};
        resp_to_5.out_a_e = top->out_a_e;
        resp_to_5.out_b_e = top->out_b_e;
        resp_to_5.out_ctrl_e = top->out_ctrl_e;
        resp_to_5.out_valid_e = top->out_valid_e;
        mpi_send_rank_4_to_5(resp_to_5);
    }
    // Send to Rank 7
    {
        mpi_rank_4_to_7_t resp_to_7{};
        resp_to_7.out_a_s = top->out_a_s;
        resp_to_7.out_b_s = top->out_b_s;
        resp_to_7.out_ctrl_s = top->out_ctrl_s;
        resp_to_7.out_valid_s = top->out_valid_s;
        mpi_send_rank_4_to_7(resp_to_7);
    }
}

void receive_inputs_for_rank_5() {
    // Receive from Rank 2
    mpi_rank_2_to_5_t req_from_2 = mpi_receive_from_rank_2_to_5();
    top->in_a_n = req_from_2.out_a_s;
    top->in_b_n = req_from_2.out_b_s;
    top->in_ctrl_n = req_from_2.out_ctrl_s;
    top->in_valid_n = req_from_2.out_valid_s;
    // Receive from Rank 4
    mpi_rank_4_to_5_t req_from_4 = mpi_receive_from_rank_4_to_5();
    top->in_a_w = req_from_4.out_a_e;
    top->in_b_w = req_from_4.out_b_e;
    top->in_ctrl_w = req_from_4.out_ctrl_e;
    top->in_valid_w = req_from_4.out_valid_e;
    // Receive from Rank 6
    mpi_rank_6_to_5_t req_from_6 = mpi_receive_from_rank_6_to_5();
    top->in_a_e = req_from_6.out_a_w;
    top->in_b_e = req_from_6.out_b_w;
    top->in_ctrl_e = req_from_6.out_ctrl_w;
    top->in_valid_e = req_from_6.out_valid_w;
    // Receive from Rank 8
    mpi_rank_8_to_5_t req_from_8 = mpi_receive_from_rank_8_to_5();
    top->in_a_s = req_from_8.out_a_n;
    top->in_b_s = req_from_8.out_b_n;
    top->in_ctrl_s = req_from_8.out_ctrl_n;
    top->in_valid_s = req_from_8.out_valid_n;
}

void send_outputs_from_rank_5() {
    // Send to Rank 2
    {
        mpi_rank_5_to_2_t resp_to_2{};
        resp_to_2.out_a_n = top->out_a_n;
        resp_to_2.out_b_n = top->out_b_n;
        resp_to_2.out_ctrl_n = top->out_ctrl_n;
        resp_to_2.out_valid_n = top->out_valid_n;
        mpi_send_rank_5_to_2(resp_to_2);
    }
    // Send to Rank 4
    {
        mpi_rank_5_to_4_t resp_to_4{};
        resp_to_4.out_a_w = top->out_a_w;
        resp_to_4.out_b_w = top->out_b_w;
        resp_to_4.out_ctrl_w = top->out_ctrl_w;
        resp_to_4.out_valid_w = top->out_valid_w;
        mpi_send_rank_5_to_4(resp_to_4);
    }
    // Send to Rank 6
    {
        mpi_rank_5_to_6_t resp_to_6{};
        resp_to_6.out_a_e = top->out_a_e;
        resp_to_6.out_b_e = top->out_b_e;
        resp_to_6.out_ctrl_e = top->out_ctrl_e;
        resp_to_6.out_valid_e = top->out_valid_e;
        mpi_send_rank_5_to_6(resp_to_6);
    }
    // Send to Rank 8
    {
        mpi_rank_5_to_8_t resp_to_8{};
        resp_to_8.out_a_s = top->out_a_s;
        resp_to_8.out_b_s = top->out_b_s;
        resp_to_8.out_ctrl_s = top->out_ctrl_s;
        resp_to_8.out_valid_s = top->out_valid_s;
        mpi_send_rank_5_to_8(resp_to_8);
    }
}

void receive_inputs_for_rank_6() {
    // Receive from Rank 3
    mpi_rank_3_to_6_t req_from_3 = mpi_receive_from_rank_3_to_6();
    top->in_a_n = req_from_3.out_a_s;
    top->in_b_n = req_from_3.out_b_s;
    top->in_ctrl_n = req_from_3.out_ctrl_s;
    top->in_valid_n = req_from_3.out_valid_s;
    // Receive from Rank 5
    mpi_rank_5_to_6_t req_from_5 = mpi_receive_from_rank_5_to_6();
    top->in_a_w = req_from_5.out_a_e;
    top->in_b_w = req_from_5.out_b_e;
    top->in_ctrl_w = req_from_5.out_ctrl_e;
    top->in_valid_w = req_from_5.out_valid_e;
    // Receive from Rank 9
    mpi_rank_9_to_6_t req_from_9 = mpi_receive_from_rank_9_to_6();
    top->in_a_s = req_from_9.out_a_n;
    top->in_b_s = req_from_9.out_b_n;
    top->in_ctrl_s = req_from_9.out_ctrl_n;
    top->in_valid_s = req_from_9.out_valid_n;
}

void send_outputs_from_rank_6() {
    // Send to Rank 3
    {
        mpi_rank_6_to_3_t resp_to_3{};
        resp_to_3.out_a_n = top->out_a_n;
        resp_to_3.out_b_n = top->out_b_n;
        resp_to_3.out_ctrl_n = top->out_ctrl_n;
        resp_to_3.out_valid_n = top->out_valid_n;
        mpi_send_rank_6_to_3(resp_to_3);
    }
    // Send to Rank 5
    {
        mpi_rank_6_to_5_t resp_to_5{};
        resp_to_5.out_a_w = top->out_a_w;
        resp_to_5.out_b_w = top->out_b_w;
        resp_to_5.out_ctrl_w = top->out_ctrl_w;
        resp_to_5.out_valid_w = top->out_valid_w;
        mpi_send_rank_6_to_5(resp_to_5);
    }
    // Send to Rank 9
    {
        mpi_rank_6_to_9_t resp_to_9{};
        resp_to_9.out_a_s = top->out_a_s;
        resp_to_9.out_b_s = top->out_b_s;
        resp_to_9.out_ctrl_s = top->out_ctrl_s;
        resp_to_9.out_valid_s = top->out_valid_s;
        mpi_send_rank_6_to_9(resp_to_9);
    }
}

void receive_inputs_for_rank_7() {
    // Receive from Rank 4
    mpi_rank_4_to_7_t req_from_4 = mpi_receive_from_rank_4_to_7();
    top->in_a_n = req_from_4.out_a_s;
    top->in_b_n = req_from_4.out_b_s;
    top->in_ctrl_n = req_from_4.out_ctrl_s;
    top->in_valid_n = req_from_4.out_valid_s;
    // Receive from Rank 8
    mpi_rank_8_to_7_t req_from_8 = mpi_receive_from_rank_8_to_7();
    top->in_a_e = req_from_8.out_a_w;
    top->in_b_e = req_from_8.out_b_w;
    top->in_ctrl_e = req_from_8.out_ctrl_w;
    top->in_valid_e = req_from_8.out_valid_w;
}

void send_outputs_from_rank_7() {
    // Send to Rank 4
    {
        mpi_rank_7_to_4_t resp_to_4{};
        resp_to_4.out_a_n = top->out_a_n;
        resp_to_4.out_b_n = top->out_b_n;
        resp_to_4.out_ctrl_n = top->out_ctrl_n;
        resp_to_4.out_valid_n = top->out_valid_n;
        mpi_send_rank_7_to_4(resp_to_4);
    }
    // Send to Rank 8
    {
        mpi_rank_7_to_8_t resp_to_8{};
        resp_to_8.out_a_e = top->out_a_e;
        resp_to_8.out_b_e = top->out_b_e;
        resp_to_8.out_ctrl_e = top->out_ctrl_e;
        resp_to_8.out_valid_e = top->out_valid_e;
        mpi_send_rank_7_to_8(resp_to_8);
    }
}

void receive_inputs_for_rank_8() {
    // Receive from Rank 5
    mpi_rank_5_to_8_t req_from_5 = mpi_receive_from_rank_5_to_8();
    top->in_a_n = req_from_5.out_a_s;
    top->in_b_n = req_from_5.out_b_s;
    top->in_ctrl_n = req_from_5.out_ctrl_s;
    top->in_valid_n = req_from_5.out_valid_s;
    // Receive from Rank 7
    mpi_rank_7_to_8_t req_from_7 = mpi_receive_from_rank_7_to_8();
    top->in_a_w = req_from_7.out_a_e;
    top->in_b_w = req_from_7.out_b_e;
    top->in_ctrl_w = req_from_7.out_ctrl_e;
    top->in_valid_w = req_from_7.out_valid_e;
    // Receive from Rank 9
    mpi_rank_9_to_8_t req_from_9 = mpi_receive_from_rank_9_to_8();
    top->in_a_e = req_from_9.out_a_w;
    top->in_b_e = req_from_9.out_b_w;
    top->in_ctrl_e = req_from_9.out_ctrl_w;
    top->in_valid_e = req_from_9.out_valid_w;
}

void send_outputs_from_rank_8() {
    // Send to Rank 5
    {
        mpi_rank_8_to_5_t resp_to_5{};
        resp_to_5.out_a_n = top->out_a_n;
        resp_to_5.out_b_n = top->out_b_n;
        resp_to_5.out_ctrl_n = top->out_ctrl_n;
        resp_to_5.out_valid_n = top->out_valid_n;
        mpi_send_rank_8_to_5(resp_to_5);
    }
    // Send to Rank 7
    {
        mpi_rank_8_to_7_t resp_to_7{};
        resp_to_7.out_a_w = top->out_a_w;
        resp_to_7.out_b_w = top->out_b_w;
        resp_to_7.out_ctrl_w = top->out_ctrl_w;
        resp_to_7.out_valid_w = top->out_valid_w;
        mpi_send_rank_8_to_7(resp_to_7);
    }
    // Send to Rank 9
    {
        mpi_rank_8_to_9_t resp_to_9{};
        resp_to_9.out_a_e = top->out_a_e;
        resp_to_9.out_b_e = top->out_b_e;
        resp_to_9.out_ctrl_e = top->out_ctrl_e;
        resp_to_9.out_valid_e = top->out_valid_e;
        mpi_send_rank_8_to_9(resp_to_9);
    }
}

void receive_inputs_for_rank_9() {
    // Receive from Rank 6
    mpi_rank_6_to_9_t req_from_6 = mpi_receive_from_rank_6_to_9();
    top->in_a_n = req_from_6.out_a_s;
    top->in_b_n = req_from_6.out_b_s;
    top->in_ctrl_n = req_from_6.out_ctrl_s;
    top->in_valid_n = req_from_6.out_valid_s;
    // Receive from Rank 8
    mpi_rank_8_to_9_t req_from_8 = mpi_receive_from_rank_8_to_9();
    top->in_a_w = req_from_8.out_a_e;
    top->in_b_w = req_from_8.out_b_e;
    top->in_ctrl_w = req_from_8.out_ctrl_e;
    top->in_valid_w = req_from_8.out_valid_e;
}

void send_outputs_from_rank_9() {
    // Send to Rank 6
    {
        mpi_rank_9_to_6_t resp_to_6{};
        resp_to_6.out_a_n = top->out_a_n;
        resp_to_6.out_b_n = top->out_b_n;
        resp_to_6.out_ctrl_n = top->out_ctrl_n;
        resp_to_6.out_valid_n = top->out_valid_n;
        mpi_send_rank_9_to_6(resp_to_6);
    }
    // Send to Rank 8
    {
        mpi_rank_9_to_8_t resp_to_8{};
        resp_to_8.out_a_w = top->out_a_w;
        resp_to_8.out_b_w = top->out_b_w;
        resp_to_8.out_ctrl_w = top->out_ctrl_w;
        resp_to_8.out_valid_w = top->out_valid_w;
        mpi_send_rank_9_to_8(resp_to_8);
    }
}

// High-level handler that coordinates the communication cycle
void handle_requests() {
    switch (rank) {
        case 1: {
            send_outputs_from_rank_1();
            receive_inputs_for_rank_1();
            top->eval();
            break;
        }
        case 2: {
            send_outputs_from_rank_2();
            receive_inputs_for_rank_2();
            top->eval();
            break;
        }
        case 3: {
            send_outputs_from_rank_3();
            receive_inputs_for_rank_3();
            top->eval();
            break;
        }
        case 4: {
            send_outputs_from_rank_4();
            receive_inputs_for_rank_4();
            top->eval();
            break;
        }
        case 5: {
            send_outputs_from_rank_5();
            receive_inputs_for_rank_5();
            top->eval();
            break;
        }
        case 6: {
            send_outputs_from_rank_6();
            receive_inputs_for_rank_6();
            top->eval();
            break;
        }
        case 7: {
            send_outputs_from_rank_7();
            receive_inputs_for_rank_7();
            top->eval();
            break;
        }
        case 8: {
            send_outputs_from_rank_8();
            receive_inputs_for_rank_8();
            top->eval();
            break;
        }
        case 9: {
            send_outputs_from_rank_9();
            receive_inputs_for_rank_9();
            top->eval();
            break;
        }
        default: break;
    }
}

int main(int argc, char** argv) {
    mpi_initialize();

    top = new Valu_tile_noc;

    rank = getRank();
    size = getSize();

    std::cout << "Partition 'alu_tile_noc' is alive on Rank " << rank << " of " << size << std::endl;

    switch (rank) {
        case 1: initialize_partition_t0_0(); break;
        case 2: initialize_partition_t0_1(); break;
        case 3: initialize_partition_t0_2(); break;
        case 4: initialize_partition_t1_0(); break;
        case 5: initialize_partition_t1_1(); break;
        case 6: initialize_partition_t1_2(); break;
        case 7: initialize_partition_t2_0(); break;
        case 8: initialize_partition_t2_1(); break;
        case 9: initialize_partition_t2_2(); break;
        default: break;
    }

    top->eval();
    MPI_Barrier(MPI_COMM_WORLD);

    bool sim_end = false;
    while (!sim_end) {
        if (rank != 0) {
             handle_requests();
        }

        int shutdown_flag = 0;
        MPI_Status status;
        MPI_Iprobe(0, SHUTDOWN_TAG, MPI_COMM_WORLD, &shutdown_flag, &status);
        if (shutdown_flag) {
            int dummy;
            MPI_Recv(&dummy, 1, MPI_INT, 0, SHUTDOWN_TAG, MPI_COMM_WORLD, &status);
            sim_end = true;
        }
        MPI_Barrier(MPI_COMM_WORLD);
    }

    std::cout << "Rank " << rank << ": Shutting down." << std::endl;

    cleanup(0);
    return 0;
}
