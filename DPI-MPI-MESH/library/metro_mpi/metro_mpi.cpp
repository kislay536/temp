// Generated by Metro-MPI Tool

#include <mpi.h>
#include <cstdint>
#include <cstddef>
#include <iostream>

using std::cout;
using std::endl;

// Struct for communication from rank 0 to 1
struct mpi_rank_0_to_1_t {
    uint64_t a; // -> maps to receiver port host_in_a
    uint64_t b; // -> maps to receiver port host_in_b
};

MPI_Datatype mpi_type_rank_0_to_1;

// Struct for communication from rank 1 to 0
struct mpi_rank_1_to_0_t {
    uint64_t host_out_a; // -> maps to receiver port logic
    bool host_out_valid; // -> maps to receiver port logic
};

MPI_Datatype mpi_type_rank_1_to_0;

// Struct for communication from rank 1 to 2
struct mpi_rank_1_to_2_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_1_to_2;

// Struct for communication from rank 1 to 4
struct mpi_rank_1_to_4_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_1_to_4;

// Struct for communication from rank 2 to 1
struct mpi_rank_2_to_1_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_2_to_1;

// Struct for communication from rank 2 to 3
struct mpi_rank_2_to_3_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_2_to_3;

// Struct for communication from rank 2 to 5
struct mpi_rank_2_to_5_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_2_to_5;

// Struct for communication from rank 3 to 2
struct mpi_rank_3_to_2_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_3_to_2;

// Struct for communication from rank 3 to 6
struct mpi_rank_3_to_6_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_3_to_6;

// Struct for communication from rank 4 to 1
struct mpi_rank_4_to_1_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_4_to_1;

// Struct for communication from rank 4 to 5
struct mpi_rank_4_to_5_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_4_to_5;

// Struct for communication from rank 4 to 7
struct mpi_rank_4_to_7_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_4_to_7;

// Struct for communication from rank 5 to 2
struct mpi_rank_5_to_2_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_5_to_2;

// Struct for communication from rank 5 to 4
struct mpi_rank_5_to_4_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_5_to_4;

// Struct for communication from rank 5 to 6
struct mpi_rank_5_to_6_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_5_to_6;

// Struct for communication from rank 5 to 8
struct mpi_rank_5_to_8_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_5_to_8;

// Struct for communication from rank 6 to 3
struct mpi_rank_6_to_3_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_6_to_3;

// Struct for communication from rank 6 to 5
struct mpi_rank_6_to_5_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_6_to_5;

// Struct for communication from rank 6 to 9
struct mpi_rank_6_to_9_t {
    uint64_t out_a_s; // -> maps to receiver port in_a_n
    uint64_t out_b_s; // -> maps to receiver port in_b_n
    uint16_t out_ctrl_s; // -> maps to receiver port in_ctrl_n
    bool out_valid_s; // -> maps to receiver port in_valid_n
};

MPI_Datatype mpi_type_rank_6_to_9;

// Struct for communication from rank 7 to 4
struct mpi_rank_7_to_4_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_7_to_4;

// Struct for communication from rank 7 to 8
struct mpi_rank_7_to_8_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_7_to_8;

// Struct for communication from rank 8 to 5
struct mpi_rank_8_to_5_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_8_to_5;

// Struct for communication from rank 8 to 7
struct mpi_rank_8_to_7_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_8_to_7;

// Struct for communication from rank 8 to 9
struct mpi_rank_8_to_9_t {
    uint64_t out_a_e; // -> maps to receiver port in_a_w
    uint64_t out_b_e; // -> maps to receiver port in_b_w
    uint16_t out_ctrl_e; // -> maps to receiver port in_ctrl_w
    bool out_valid_e; // -> maps to receiver port in_valid_w
};

MPI_Datatype mpi_type_rank_8_to_9;

// Struct for communication from rank 9 to 6
struct mpi_rank_9_to_6_t {
    uint64_t out_a_n; // -> maps to receiver port in_a_s
    uint64_t out_b_n; // -> maps to receiver port in_b_s
    uint16_t out_ctrl_n; // -> maps to receiver port in_ctrl_s
    bool out_valid_n; // -> maps to receiver port in_valid_s
};

MPI_Datatype mpi_type_rank_9_to_6;

// Struct for communication from rank 9 to 8
struct mpi_rank_9_to_8_t {
    uint64_t out_a_w; // -> maps to receiver port in_a_e
    uint64_t out_b_w; // -> maps to receiver port in_b_e
    uint16_t out_ctrl_w; // -> maps to receiver port in_ctrl_e
    bool out_valid_w; // -> maps to receiver port in_valid_e
};

MPI_Datatype mpi_type_rank_9_to_8;


void initialize_mpi_types() {
    {
        const int nitems = 2;
        int blocklengths[2] = {1, 1};
        MPI_Datatype types[2] = {MPI_UINT64_T, MPI_UINT64_T};
        MPI_Aint offsets[2];
        offsets[0] = offsetof(mpi_rank_0_to_1_t, a);
        offsets[1] = offsetof(mpi_rank_0_to_1_t, b);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_0_to_1);
        MPI_Type_commit(&mpi_type_rank_0_to_1);
    }
    {
        const int nitems = 2;
        int blocklengths[2] = {1, 1};
        MPI_Datatype types[2] = {MPI_UINT64_T, MPI_C_BOOL};
        MPI_Aint offsets[2];
        offsets[0] = offsetof(mpi_rank_1_to_0_t, host_out_a);
        offsets[1] = offsetof(mpi_rank_1_to_0_t, host_out_valid);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_1_to_0);
        MPI_Type_commit(&mpi_type_rank_1_to_0);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_1_to_2_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_1_to_2_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_1_to_2_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_1_to_2_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_1_to_2);
        MPI_Type_commit(&mpi_type_rank_1_to_2);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_1_to_4_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_1_to_4_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_1_to_4_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_1_to_4_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_1_to_4);
        MPI_Type_commit(&mpi_type_rank_1_to_4);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_2_to_1_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_2_to_1_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_2_to_1_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_2_to_1_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_2_to_1);
        MPI_Type_commit(&mpi_type_rank_2_to_1);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_2_to_3_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_2_to_3_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_2_to_3_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_2_to_3_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_2_to_3);
        MPI_Type_commit(&mpi_type_rank_2_to_3);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_2_to_5_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_2_to_5_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_2_to_5_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_2_to_5_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_2_to_5);
        MPI_Type_commit(&mpi_type_rank_2_to_5);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_3_to_2_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_3_to_2_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_3_to_2_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_3_to_2_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_3_to_2);
        MPI_Type_commit(&mpi_type_rank_3_to_2);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_3_to_6_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_3_to_6_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_3_to_6_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_3_to_6_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_3_to_6);
        MPI_Type_commit(&mpi_type_rank_3_to_6);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_4_to_1_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_4_to_1_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_4_to_1_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_4_to_1_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_4_to_1);
        MPI_Type_commit(&mpi_type_rank_4_to_1);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_4_to_5_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_4_to_5_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_4_to_5_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_4_to_5_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_4_to_5);
        MPI_Type_commit(&mpi_type_rank_4_to_5);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_4_to_7_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_4_to_7_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_4_to_7_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_4_to_7_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_4_to_7);
        MPI_Type_commit(&mpi_type_rank_4_to_7);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_5_to_2_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_5_to_2_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_5_to_2_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_5_to_2_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_5_to_2);
        MPI_Type_commit(&mpi_type_rank_5_to_2);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_5_to_4_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_5_to_4_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_5_to_4_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_5_to_4_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_5_to_4);
        MPI_Type_commit(&mpi_type_rank_5_to_4);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_5_to_6_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_5_to_6_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_5_to_6_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_5_to_6_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_5_to_6);
        MPI_Type_commit(&mpi_type_rank_5_to_6);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_5_to_8_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_5_to_8_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_5_to_8_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_5_to_8_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_5_to_8);
        MPI_Type_commit(&mpi_type_rank_5_to_8);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_6_to_3_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_6_to_3_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_6_to_3_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_6_to_3_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_6_to_3);
        MPI_Type_commit(&mpi_type_rank_6_to_3);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_6_to_5_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_6_to_5_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_6_to_5_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_6_to_5_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_6_to_5);
        MPI_Type_commit(&mpi_type_rank_6_to_5);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_6_to_9_t, out_a_s);
        offsets[1] = offsetof(mpi_rank_6_to_9_t, out_b_s);
        offsets[2] = offsetof(mpi_rank_6_to_9_t, out_ctrl_s);
        offsets[3] = offsetof(mpi_rank_6_to_9_t, out_valid_s);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_6_to_9);
        MPI_Type_commit(&mpi_type_rank_6_to_9);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_7_to_4_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_7_to_4_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_7_to_4_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_7_to_4_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_7_to_4);
        MPI_Type_commit(&mpi_type_rank_7_to_4);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_7_to_8_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_7_to_8_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_7_to_8_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_7_to_8_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_7_to_8);
        MPI_Type_commit(&mpi_type_rank_7_to_8);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_8_to_5_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_8_to_5_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_8_to_5_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_8_to_5_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_8_to_5);
        MPI_Type_commit(&mpi_type_rank_8_to_5);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_8_to_7_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_8_to_7_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_8_to_7_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_8_to_7_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_8_to_7);
        MPI_Type_commit(&mpi_type_rank_8_to_7);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_8_to_9_t, out_a_e);
        offsets[1] = offsetof(mpi_rank_8_to_9_t, out_b_e);
        offsets[2] = offsetof(mpi_rank_8_to_9_t, out_ctrl_e);
        offsets[3] = offsetof(mpi_rank_8_to_9_t, out_valid_e);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_8_to_9);
        MPI_Type_commit(&mpi_type_rank_8_to_9);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_9_to_6_t, out_a_n);
        offsets[1] = offsetof(mpi_rank_9_to_6_t, out_b_n);
        offsets[2] = offsetof(mpi_rank_9_to_6_t, out_ctrl_n);
        offsets[3] = offsetof(mpi_rank_9_to_6_t, out_valid_n);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_9_to_6);
        MPI_Type_commit(&mpi_type_rank_9_to_6);
    }
    {
        const int nitems = 4;
        int blocklengths[4] = {1, 1, 1, 1};
        MPI_Datatype types[4] = {MPI_UINT64_T, MPI_UINT64_T, MPI_UINT16_T, MPI_C_BOOL};
        MPI_Aint offsets[4];
        offsets[0] = offsetof(mpi_rank_9_to_8_t, out_a_w);
        offsets[1] = offsetof(mpi_rank_9_to_8_t, out_b_w);
        offsets[2] = offsetof(mpi_rank_9_to_8_t, out_ctrl_w);
        offsets[3] = offsetof(mpi_rank_9_to_8_t, out_valid_w);
        MPI_Type_create_struct(nitems, blocklengths, offsets, types, &mpi_type_rank_9_to_8);
        MPI_Type_commit(&mpi_type_rank_9_to_8);
    }
}

extern void mpi_send_rank_0_to_1(mpi_rank_0_to_1_t message) {
    MPI_Send(&message, 1, mpi_type_rank_0_to_1, 1, 0, MPI_COMM_WORLD);
}

extern mpi_rank_0_to_1_t mpi_receive_from_rank_0_to_1() {
    mpi_rank_0_to_1_t message;
    MPI_Recv(&message, 1, mpi_type_rank_0_to_1, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_1_to_0(mpi_rank_1_to_0_t message) {
    MPI_Send(&message, 1, mpi_type_rank_1_to_0, 0, 0, MPI_COMM_WORLD);
}

extern mpi_rank_1_to_0_t mpi_receive_from_rank_1_to_0() {
    mpi_rank_1_to_0_t message;
    MPI_Recv(&message, 1, mpi_type_rank_1_to_0, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_1_to_2(mpi_rank_1_to_2_t message) {
    MPI_Send(&message, 1, mpi_type_rank_1_to_2, 2, 0, MPI_COMM_WORLD);
}

extern mpi_rank_1_to_2_t mpi_receive_from_rank_1_to_2() {
    mpi_rank_1_to_2_t message;
    MPI_Recv(&message, 1, mpi_type_rank_1_to_2, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_1_to_4(mpi_rank_1_to_4_t message) {
    MPI_Send(&message, 1, mpi_type_rank_1_to_4, 4, 0, MPI_COMM_WORLD);
}

extern mpi_rank_1_to_4_t mpi_receive_from_rank_1_to_4() {
    mpi_rank_1_to_4_t message;
    MPI_Recv(&message, 1, mpi_type_rank_1_to_4, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_2_to_1(mpi_rank_2_to_1_t message) {
    MPI_Send(&message, 1, mpi_type_rank_2_to_1, 1, 0, MPI_COMM_WORLD);
}

extern mpi_rank_2_to_1_t mpi_receive_from_rank_2_to_1() {
    mpi_rank_2_to_1_t message;
    MPI_Recv(&message, 1, mpi_type_rank_2_to_1, 2, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_2_to_3(mpi_rank_2_to_3_t message) {
    MPI_Send(&message, 1, mpi_type_rank_2_to_3, 3, 0, MPI_COMM_WORLD);
}

extern mpi_rank_2_to_3_t mpi_receive_from_rank_2_to_3() {
    mpi_rank_2_to_3_t message;
    MPI_Recv(&message, 1, mpi_type_rank_2_to_3, 2, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_2_to_5(mpi_rank_2_to_5_t message) {
    MPI_Send(&message, 1, mpi_type_rank_2_to_5, 5, 0, MPI_COMM_WORLD);
}

extern mpi_rank_2_to_5_t mpi_receive_from_rank_2_to_5() {
    mpi_rank_2_to_5_t message;
    MPI_Recv(&message, 1, mpi_type_rank_2_to_5, 2, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_3_to_2(mpi_rank_3_to_2_t message) {
    MPI_Send(&message, 1, mpi_type_rank_3_to_2, 2, 0, MPI_COMM_WORLD);
}

extern mpi_rank_3_to_2_t mpi_receive_from_rank_3_to_2() {
    mpi_rank_3_to_2_t message;
    MPI_Recv(&message, 1, mpi_type_rank_3_to_2, 3, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_3_to_6(mpi_rank_3_to_6_t message) {
    MPI_Send(&message, 1, mpi_type_rank_3_to_6, 6, 0, MPI_COMM_WORLD);
}

extern mpi_rank_3_to_6_t mpi_receive_from_rank_3_to_6() {
    mpi_rank_3_to_6_t message;
    MPI_Recv(&message, 1, mpi_type_rank_3_to_6, 3, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_4_to_1(mpi_rank_4_to_1_t message) {
    MPI_Send(&message, 1, mpi_type_rank_4_to_1, 1, 0, MPI_COMM_WORLD);
}

extern mpi_rank_4_to_1_t mpi_receive_from_rank_4_to_1() {
    mpi_rank_4_to_1_t message;
    MPI_Recv(&message, 1, mpi_type_rank_4_to_1, 4, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_4_to_5(mpi_rank_4_to_5_t message) {
    MPI_Send(&message, 1, mpi_type_rank_4_to_5, 5, 0, MPI_COMM_WORLD);
}

extern mpi_rank_4_to_5_t mpi_receive_from_rank_4_to_5() {
    mpi_rank_4_to_5_t message;
    MPI_Recv(&message, 1, mpi_type_rank_4_to_5, 4, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_4_to_7(mpi_rank_4_to_7_t message) {
    MPI_Send(&message, 1, mpi_type_rank_4_to_7, 7, 0, MPI_COMM_WORLD);
}

extern mpi_rank_4_to_7_t mpi_receive_from_rank_4_to_7() {
    mpi_rank_4_to_7_t message;
    MPI_Recv(&message, 1, mpi_type_rank_4_to_7, 4, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_5_to_2(mpi_rank_5_to_2_t message) {
    MPI_Send(&message, 1, mpi_type_rank_5_to_2, 2, 0, MPI_COMM_WORLD);
}

extern mpi_rank_5_to_2_t mpi_receive_from_rank_5_to_2() {
    mpi_rank_5_to_2_t message;
    MPI_Recv(&message, 1, mpi_type_rank_5_to_2, 5, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_5_to_4(mpi_rank_5_to_4_t message) {
    MPI_Send(&message, 1, mpi_type_rank_5_to_4, 4, 0, MPI_COMM_WORLD);
}

extern mpi_rank_5_to_4_t mpi_receive_from_rank_5_to_4() {
    mpi_rank_5_to_4_t message;
    MPI_Recv(&message, 1, mpi_type_rank_5_to_4, 5, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_5_to_6(mpi_rank_5_to_6_t message) {
    MPI_Send(&message, 1, mpi_type_rank_5_to_6, 6, 0, MPI_COMM_WORLD);
}

extern mpi_rank_5_to_6_t mpi_receive_from_rank_5_to_6() {
    mpi_rank_5_to_6_t message;
    MPI_Recv(&message, 1, mpi_type_rank_5_to_6, 5, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_5_to_8(mpi_rank_5_to_8_t message) {
    MPI_Send(&message, 1, mpi_type_rank_5_to_8, 8, 0, MPI_COMM_WORLD);
}

extern mpi_rank_5_to_8_t mpi_receive_from_rank_5_to_8() {
    mpi_rank_5_to_8_t message;
    MPI_Recv(&message, 1, mpi_type_rank_5_to_8, 5, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_6_to_3(mpi_rank_6_to_3_t message) {
    MPI_Send(&message, 1, mpi_type_rank_6_to_3, 3, 0, MPI_COMM_WORLD);
}

extern mpi_rank_6_to_3_t mpi_receive_from_rank_6_to_3() {
    mpi_rank_6_to_3_t message;
    MPI_Recv(&message, 1, mpi_type_rank_6_to_3, 6, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_6_to_5(mpi_rank_6_to_5_t message) {
    MPI_Send(&message, 1, mpi_type_rank_6_to_5, 5, 0, MPI_COMM_WORLD);
}

extern mpi_rank_6_to_5_t mpi_receive_from_rank_6_to_5() {
    mpi_rank_6_to_5_t message;
    MPI_Recv(&message, 1, mpi_type_rank_6_to_5, 6, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_6_to_9(mpi_rank_6_to_9_t message) {
    MPI_Send(&message, 1, mpi_type_rank_6_to_9, 9, 0, MPI_COMM_WORLD);
}

extern mpi_rank_6_to_9_t mpi_receive_from_rank_6_to_9() {
    mpi_rank_6_to_9_t message;
    MPI_Recv(&message, 1, mpi_type_rank_6_to_9, 6, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_7_to_4(mpi_rank_7_to_4_t message) {
    MPI_Send(&message, 1, mpi_type_rank_7_to_4, 4, 0, MPI_COMM_WORLD);
}

extern mpi_rank_7_to_4_t mpi_receive_from_rank_7_to_4() {
    mpi_rank_7_to_4_t message;
    MPI_Recv(&message, 1, mpi_type_rank_7_to_4, 7, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_7_to_8(mpi_rank_7_to_8_t message) {
    MPI_Send(&message, 1, mpi_type_rank_7_to_8, 8, 0, MPI_COMM_WORLD);
}

extern mpi_rank_7_to_8_t mpi_receive_from_rank_7_to_8() {
    mpi_rank_7_to_8_t message;
    MPI_Recv(&message, 1, mpi_type_rank_7_to_8, 7, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_8_to_5(mpi_rank_8_to_5_t message) {
    MPI_Send(&message, 1, mpi_type_rank_8_to_5, 5, 0, MPI_COMM_WORLD);
}

extern mpi_rank_8_to_5_t mpi_receive_from_rank_8_to_5() {
    mpi_rank_8_to_5_t message;
    MPI_Recv(&message, 1, mpi_type_rank_8_to_5, 8, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_8_to_7(mpi_rank_8_to_7_t message) {
    MPI_Send(&message, 1, mpi_type_rank_8_to_7, 7, 0, MPI_COMM_WORLD);
}

extern mpi_rank_8_to_7_t mpi_receive_from_rank_8_to_7() {
    mpi_rank_8_to_7_t message;
    MPI_Recv(&message, 1, mpi_type_rank_8_to_7, 8, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_8_to_9(mpi_rank_8_to_9_t message) {
    MPI_Send(&message, 1, mpi_type_rank_8_to_9, 9, 0, MPI_COMM_WORLD);
}

extern mpi_rank_8_to_9_t mpi_receive_from_rank_8_to_9() {
    mpi_rank_8_to_9_t message;
    MPI_Recv(&message, 1, mpi_type_rank_8_to_9, 8, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_9_to_6(mpi_rank_9_to_6_t message) {
    MPI_Send(&message, 1, mpi_type_rank_9_to_6, 6, 0, MPI_COMM_WORLD);
}

extern mpi_rank_9_to_6_t mpi_receive_from_rank_9_to_6() {
    mpi_rank_9_to_6_t message;
    MPI_Recv(&message, 1, mpi_type_rank_9_to_6, 9, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

extern void mpi_send_rank_9_to_8(mpi_rank_9_to_8_t message) {
    MPI_Send(&message, 1, mpi_type_rank_9_to_8, 8, 0, MPI_COMM_WORLD);
}

extern mpi_rank_9_to_8_t mpi_receive_from_rank_9_to_8() {
    mpi_rank_9_to_8_t message;
    MPI_Recv(&message, 1, mpi_type_rank_9_to_8, 9, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
    return message;
}

int getRank()
{
    int rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    return rank;
}

int getSize()
{
    int size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    return size;
}

extern void mpi_initialize() {
    MPI_Init(NULL, NULL);
    initialize_mpi_types();
}

extern void mpi_finalize() {
    cout << "Ending Communication from Rank " << getRank() << endl;
    MPI_Finalize();
}
