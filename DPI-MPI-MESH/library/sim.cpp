// tb_calculator.cpp
#include "Vcalculator.h"       // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>
#include <string>

int main(int argc, char **argv) {
    Verilated::commandArgs(argc, argv);

    Vcalculator *top = new Vcalculator;

    // Enable VCD trace
    Verilated::traceEverOn(true);
    VerilatedVcdC *trace = new VerilatedVcdC;
    top->trace(trace, 99);
    trace->open("tb_calculator.vcd");

    // Operation names corresponding to each mode
    const std::string op_names[] = {
        "ADD",      // 0
        "SUB",      // 1
        "MUL",      // 2
        "DIV",      // 3
        "AND",      // 4
        "OR",       // 5
        "XOR",      // 6
        "SLL",      // 7 (shift left logical)
        "SRL"       // 8 (shift right logical)
    };

    // Three test input pairs
    uint64_t a_vals[] = {20, 8, 7};
    uint64_t b_vals[] = {3,  4, 2};

    int cycles = 0;

    // Loop through each input pair
    for (int i = 0; i < 3; i++) {
        // Test all modes for this pair
        for (uint8_t mode = 0; mode <= 8; mode++) {
            top->a = a_vals[i];
            top->b = b_vals[i];
            top->mode = mode;

            // Eval (no clock here, purely combinational)
            top->eval();
            trace->dump(cycles++);

            std::cout << "[test "<<i
                      << "] a=" << top->a
                      << " b=" << top->b
                      << " mode=" << int(top->mode)
                      << " (" << op_names[mode] << ")"
                      << " valid=" << int(top->valid)
                      << " result=" << top->result
                      << std::endl;
        }
    }

    // Finish
    top->final();
    trace->close();
    delete top;
    delete trace;
    return 0;
}
