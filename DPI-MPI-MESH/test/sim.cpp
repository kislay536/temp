// tb_calculator.cpp
#include "Vcalculator.h"       // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>

int main(int argc, char **argv) {
    Verilated::commandArgs(argc, argv);

    Vcalculator *top = new Vcalculator;

    // Enable VCD trace
    Verilated::traceEverOn(true);
    VerilatedVcdC *trace = new VerilatedVcdC;
    top->trace(trace, 99);
    trace->open("tb_calculator.vcd");

    // Test cases
    uint64_t a_vals[] = {20, 0xFF00FF00ULL, 7};
    uint64_t b_vals[] = {3,  0x00FF00FFULL, 2};
    uint8_t modes[] = {0,1,2,3,4,5,6,7,8,4,7};
    int cycles = 0;

    // Run 11 tests
    for (int t = 0; t < 11; t++) {
        // Drive inputs
        top->a = (t < 9) ? 20 : a_vals[t-9];
        top->b = (t < 9) ? 3  : b_vals[t-9];
        top->mode = modes[t];

        // Eval (no clock here, purely combinational)
        top->eval();
        trace->dump(cycles++);

        std::cout << "mode=" << int(top->mode)
                  << " valid=" << int(top->valid)
                  << " result=" << top->result
                  << std::endl;
    }

    // Finish
    top->final();
    trace->close();
    delete top;
    delete trace;
    return 0;
}
